// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Context;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Context
{
    public partial class Context
    {
        private IContextProcedures _procedures;

        public virtual IContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class ContextProcedures : IContextProcedures
    {
        private readonly Context _context;

        public ContextProcedures(Context context)
        {
            _context = context;
        }

        public virtual async Task<int> sp_AsignarUnidadAsync(long? idPropietario, long? idDepartamento, decimal? porcentajePropiedad, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdPropietario",
                    Value = idPropietario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdDepartamento",
                    Value = idDepartamento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PorcentajePropiedad",
                    Precision = 5,
                    Scale = 2,
                    Value = porcentajePropiedad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_AsignarUnidad] @IdPropietario = @IdPropietario, @IdDepartamento = @IdDepartamento, @PorcentajePropiedad = @PorcentajePropiedad", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BuscarDepartamentosResult>> sp_BuscarDepartamentosAsync(string palabraClave, string rUT, string numeroUnidad, string ubicacion, int? numeroPagina, int? tamanoPagina, OutputParameter<int?> totalCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalCount = new SqlParameter
            {
                ParameterName = "TotalCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = totalCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PalabraClave",
                    Size = 100,
                    Value = palabraClave ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RUT",
                    Size = 20,
                    Value = rUT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroUnidad",
                    Size = 10,
                    Value = numeroUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ubicacion",
                    Size = 200,
                    Value = ubicacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroPagina",
                    Value = numeroPagina ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TamanoPagina",
                    Value = tamanoPagina ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BuscarDepartamentosResult>("EXEC @returnValue = [dbo].[sp_BuscarDepartamentos] @PalabraClave = @PalabraClave, @RUT = @RUT, @NumeroUnidad = @NumeroUnidad, @Ubicacion = @Ubicacion, @NumeroPagina = @NumeroPagina, @TamanoPagina = @TamanoPagina, @TotalCount = @TotalCount OUTPUT", sqlParameters, cancellationToken);

            totalCount?.SetValue(parameterTotalCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_BuscarDepartamentos_TodosResult>> sp_BuscarDepartamentos_TodosAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_BuscarDepartamentos_TodosResult>("EXEC @returnValue = [dbo].[sp_BuscarDepartamentos_Todos]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_RegistrarDepartamentoAsync(string numero, int? idOrientacion, string direccion, string numeracionDireccion, int? idComuna, int? cantidadDormitorios, int? cantidadBanos, int? precioArriendo, int? precioGastoComun, int? idTipoCocina, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Size = 10,
                    Value = numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdOrientacion",
                    Value = idOrientacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 100,
                    Value = direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeracionDireccion",
                    Size = 10,
                    Value = numeracionDireccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdComuna",
                    Value = idComuna ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadDormitorios",
                    Value = cantidadDormitorios ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadBanos",
                    Value = cantidadBanos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PrecioArriendo",
                    Value = precioArriendo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PrecioGastoComun",
                    Value = precioGastoComun ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoCocina",
                    Value = idTipoCocina ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_RegistrarDepartamento] @Numero = @Numero, @IdOrientacion = @IdOrientacion, @Direccion = @Direccion, @NumeracionDireccion = @NumeracionDireccion, @IdComuna = @IdComuna, @CantidadDormitorios = @CantidadDormitorios, @CantidadBanos = @CantidadBanos, @PrecioArriendo = @PrecioArriendo, @PrecioGastoComun = @PrecioGastoComun, @IdTipoCocina = @IdTipoCocina", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_RegistrarPropietario_AsignarUnidadResult>> sp_RegistrarPropietario_AsignarUnidadAsync(string rut, string dv, string nombre, DateTime? fechaNacimiento, string correoElectronico, long? idDepartamento, decimal? porcentajePropiedad, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Rut",
                    Size = 20,
                    Value = rut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Dv",
                    Size = 1,
                    Value = dv ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaNacimiento",
                    Value = fechaNacimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CorreoElectronico",
                    Size = 100,
                    Value = correoElectronico ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDepartamento",
                    Value = idDepartamento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PorcentajePropiedad",
                    Precision = 5,
                    Scale = 2,
                    Value = porcentajePropiedad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_RegistrarPropietario_AsignarUnidadResult>("EXEC @returnValue = [dbo].[sp_RegistrarPropietario_AsignarUnidad] @Rut = @Rut, @Dv = @Dv, @Nombre = @Nombre, @FechaNacimiento = @FechaNacimiento, @CorreoElectronico = @CorreoElectronico, @IdDepartamento = @IdDepartamento, @PorcentajePropiedad = @PorcentajePropiedad", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
